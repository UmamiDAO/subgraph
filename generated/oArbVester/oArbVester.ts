// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ClosePositionWindowSet extends ethereum.Event {
  get params(): ClosePositionWindowSet__Params {
    return new ClosePositionWindowSet__Params(this);
  }
}

export class ClosePositionWindowSet__Params {
  _event: ClosePositionWindowSet;

  constructor(event: ClosePositionWindowSet) {
    this._event = event;
  }

  get _closePositionWindow(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vestingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EmergencyWithdrawTaxSet extends ethereum.Event {
  get params(): EmergencyWithdrawTaxSet__Params {
    return new EmergencyWithdrawTaxSet__Params(this);
  }
}

export class EmergencyWithdrawTaxSet__Params {
  _event: EmergencyWithdrawTaxSet;

  constructor(event: EmergencyWithdrawTaxSet) {
    this._event = event;
  }

  get _emergencyWithdrawTax(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ForceClosePositionTaxSet extends ethereum.Event {
  get params(): ForceClosePositionTaxSet__Params {
    return new ForceClosePositionTaxSet__Params(this);
  }
}

export class ForceClosePositionTaxSet__Params {
  _event: ForceClosePositionTaxSet;

  constructor(event: ForceClosePositionTaxSet) {
    this._event = event;
  }

  get _forceClosePositionTax(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OARBSet extends ethereum.Event {
  get params(): OARBSet__Params {
    return new OARBSet__Params(this);
  }
}

export class OARBSet__Params {
  _event: OARBSet;

  constructor(event: OARBSet) {
    this._event = event;
  }

  get oARB(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PositionClosed extends ethereum.Event {
  get params(): PositionClosed__Params {
    return new PositionClosed__Params(this);
  }
}

export class PositionClosed__Params {
  _event: PositionClosed;

  constructor(event: PositionClosed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vestingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetArbVault extends ethereum.Event {
  get params(): SetArbVault__Params {
    return new SetArbVault__Params(this);
  }
}

export class SetArbVault__Params {
  _event: SetArbVault;

  constructor(event: SetArbVault) {
    this._event = event;
  }

  get _newArbVault(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetDurations extends ethereum.Event {
  get params(): SetDurations__Params {
    return new SetDurations__Params(this);
  }
}

export class SetDurations__Params {
  _event: SetDurations;

  constructor(event: SetDurations) {
    this._event = event;
  }

  get _minDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _maxDuration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetPriceFeed extends ethereum.Event {
  get params(): SetPriceFeed__Params {
    return new SetPriceFeed__Params(this);
  }
}

export class SetPriceFeed__Params {
  _event: SetPriceFeed;

  constructor(event: SetPriceFeed) {
    this._event = event;
  }

  get _newPriceFeed(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetTreasury extends ethereum.Event {
  get params(): SetTreasury__Params {
    return new SetTreasury__Params(this);
  }
}

export class SetTreasury__Params {
  _event: SetTreasury;

  constructor(event: SetTreasury) {
    this._event = event;
  }

  get _newTreasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Vesting extends ethereum.Event {
  get params(): Vesting__Params {
    return new Vesting__Params(this);
  }
}

export class Vesting__Params {
  _event: Vesting;

  constructor(event: Vesting) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get duration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get vestingId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VestingActiveSet extends ethereum.Event {
  get params(): VestingActiveSet__Params {
    return new VestingActiveSet__Params(this);
  }
}

export class VestingActiveSet__Params {
  _event: VestingActiveSet;

  constructor(event: VestingActiveSet) {
    this._event = event;
  }

  get vestingActive(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class oArbVester__vestingPositionsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getId(): BigInt {
    return this.value1;
  }

  getStartTime(): BigInt {
    return this.value2;
  }

  getDuration(): BigInt {
    return this.value3;
  }

  getAmount(): BigInt {
    return this.value4;
  }
}

export class oArbVester extends ethereum.SmartContract {
  static bind(address: Address): oArbVester {
    return new oArbVester("oArbVester", address);
  }

  ARB(): Address {
    let result = super.call("ARB", "ARB():(address)", []);

    return result[0].toAddress();
  }

  try_ARB(): ethereum.CallResult<Address> {
    let result = super.tryCall("ARB", "ARB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  AUTH(): Address {
    let result = super.call("AUTH", "AUTH():(address)", []);

    return result[0].toAddress();
  }

  try_AUTH(): ethereum.CallResult<Address> {
    let result = super.tryCall("AUTH", "AUTH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  closePositionWindow(): BigInt {
    let result = super.call(
      "closePositionWindow",
      "closePositionWindow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_closePositionWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "closePositionWindow",
      "closePositionWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergencyWithdrawTax(): BigInt {
    let result = super.call(
      "emergencyWithdrawTax",
      "emergencyWithdrawTax():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_emergencyWithdrawTax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emergencyWithdrawTax",
      "emergencyWithdrawTax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  forceClosePositionTax(): BigInt {
    let result = super.call(
      "forceClosePositionTax",
      "forceClosePositionTax():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_forceClosePositionTax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "forceClosePositionTax",
      "forceClosePositionTax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxDuration(): BigInt {
    let result = super.call("maxDuration", "maxDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDuration", "maxDuration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDuration(): BigInt {
    let result = super.call("minDuration", "minDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDuration", "minDuration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  oARB(): Address {
    let result = super.call("oARB", "oARB():(address)", []);

    return result[0].toAddress();
  }

  try_oARB(): ethereum.CallResult<Address> {
    let result = super.tryCall("oARB", "oARB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  promisedArbTokens(): BigInt {
    let result = super.call(
      "promisedArbTokens",
      "promisedArbTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_promisedArbTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "promisedArbTokens",
      "promisedArbTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(id: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_tokenURI(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vest(_amount: BigInt, _duration: BigInt): BigInt {
    let result = super.call("vest", "vest(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount),
      ethereum.Value.fromUnsignedBigInt(_duration)
    ]);

    return result[0].toBigInt();
  }

  try_vest(_amount: BigInt, _duration: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vest", "vest(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount),
      ethereum.Value.fromUnsignedBigInt(_duration)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingActive(): boolean {
    let result = super.call("vestingActive", "vestingActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_vestingActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("vestingActive", "vestingActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vestingPositions(param0: BigInt): oArbVester__vestingPositionsResult {
    let result = super.call(
      "vestingPositions",
      "vestingPositions(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new oArbVester__vestingPositionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_vestingPositions(
    param0: BigInt
  ): ethereum.CallResult<oArbVester__vestingPositionsResult> {
    let result = super.tryCall(
      "vestingPositions",
      "vestingPositions(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new oArbVester__vestingPositionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _arb(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oARB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _auth(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _priceFeed(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _vault(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClosePositionAndBuyTokensCall extends ethereum.Call {
  get inputs(): ClosePositionAndBuyTokensCall__Inputs {
    return new ClosePositionAndBuyTokensCall__Inputs(this);
  }

  get outputs(): ClosePositionAndBuyTokensCall__Outputs {
    return new ClosePositionAndBuyTokensCall__Outputs(this);
  }
}

export class ClosePositionAndBuyTokensCall__Inputs {
  _call: ClosePositionAndBuyTokensCall;

  constructor(call: ClosePositionAndBuyTokensCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClosePositionAndBuyTokensCall__Outputs {
  _call: ClosePositionAndBuyTokensCall;

  constructor(call: ClosePositionAndBuyTokensCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class ForceClosePositionCall extends ethereum.Call {
  get inputs(): ForceClosePositionCall__Inputs {
    return new ForceClosePositionCall__Inputs(this);
  }

  get outputs(): ForceClosePositionCall__Outputs {
    return new ForceClosePositionCall__Outputs(this);
  }
}

export class ForceClosePositionCall__Inputs {
  _call: ForceClosePositionCall;

  constructor(call: ForceClosePositionCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ForceClosePositionCall__Outputs {
  _call: ForceClosePositionCall;

  constructor(call: ForceClosePositionCall) {
    this._call = call;
  }
}

export class OwnerSetClosePositionWindowCall extends ethereum.Call {
  get inputs(): OwnerSetClosePositionWindowCall__Inputs {
    return new OwnerSetClosePositionWindowCall__Inputs(this);
  }

  get outputs(): OwnerSetClosePositionWindowCall__Outputs {
    return new OwnerSetClosePositionWindowCall__Outputs(this);
  }
}

export class OwnerSetClosePositionWindowCall__Inputs {
  _call: OwnerSetClosePositionWindowCall;

  constructor(call: OwnerSetClosePositionWindowCall) {
    this._call = call;
  }

  get _closePositionWindow(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OwnerSetClosePositionWindowCall__Outputs {
  _call: OwnerSetClosePositionWindowCall;

  constructor(call: OwnerSetClosePositionWindowCall) {
    this._call = call;
  }
}

export class OwnerSetEmergencyWithdrawTaxCall extends ethereum.Call {
  get inputs(): OwnerSetEmergencyWithdrawTaxCall__Inputs {
    return new OwnerSetEmergencyWithdrawTaxCall__Inputs(this);
  }

  get outputs(): OwnerSetEmergencyWithdrawTaxCall__Outputs {
    return new OwnerSetEmergencyWithdrawTaxCall__Outputs(this);
  }
}

export class OwnerSetEmergencyWithdrawTaxCall__Inputs {
  _call: OwnerSetEmergencyWithdrawTaxCall;

  constructor(call: OwnerSetEmergencyWithdrawTaxCall) {
    this._call = call;
  }

  get _emergencyWithdrawTax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OwnerSetEmergencyWithdrawTaxCall__Outputs {
  _call: OwnerSetEmergencyWithdrawTaxCall;

  constructor(call: OwnerSetEmergencyWithdrawTaxCall) {
    this._call = call;
  }
}

export class OwnerSetForceClosePositionTaxCall extends ethereum.Call {
  get inputs(): OwnerSetForceClosePositionTaxCall__Inputs {
    return new OwnerSetForceClosePositionTaxCall__Inputs(this);
  }

  get outputs(): OwnerSetForceClosePositionTaxCall__Outputs {
    return new OwnerSetForceClosePositionTaxCall__Outputs(this);
  }
}

export class OwnerSetForceClosePositionTaxCall__Inputs {
  _call: OwnerSetForceClosePositionTaxCall;

  constructor(call: OwnerSetForceClosePositionTaxCall) {
    this._call = call;
  }

  get _forceClosePositionTax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OwnerSetForceClosePositionTaxCall__Outputs {
  _call: OwnerSetForceClosePositionTaxCall;

  constructor(call: OwnerSetForceClosePositionTaxCall) {
    this._call = call;
  }
}

export class OwnerSetOARBCall extends ethereum.Call {
  get inputs(): OwnerSetOARBCall__Inputs {
    return new OwnerSetOARBCall__Inputs(this);
  }

  get outputs(): OwnerSetOARBCall__Outputs {
    return new OwnerSetOARBCall__Outputs(this);
  }
}

export class OwnerSetOARBCall__Inputs {
  _call: OwnerSetOARBCall;

  constructor(call: OwnerSetOARBCall) {
    this._call = call;
  }

  get _oARB(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class OwnerSetOARBCall__Outputs {
  _call: OwnerSetOARBCall;

  constructor(call: OwnerSetOARBCall) {
    this._call = call;
  }
}

export class OwnerSetVestingActiveCall extends ethereum.Call {
  get inputs(): OwnerSetVestingActiveCall__Inputs {
    return new OwnerSetVestingActiveCall__Inputs(this);
  }

  get outputs(): OwnerSetVestingActiveCall__Outputs {
    return new OwnerSetVestingActiveCall__Outputs(this);
  }
}

export class OwnerSetVestingActiveCall__Inputs {
  _call: OwnerSetVestingActiveCall;

  constructor(call: OwnerSetVestingActiveCall) {
    this._call = call;
  }

  get _vestingActive(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class OwnerSetVestingActiveCall__Outputs {
  _call: OwnerSetVestingActiveCall;

  constructor(call: OwnerSetVestingActiveCall) {
    this._call = call;
  }
}

export class RetriveTokensCall extends ethereum.Call {
  get inputs(): RetriveTokensCall__Inputs {
    return new RetriveTokensCall__Inputs(this);
  }

  get outputs(): RetriveTokensCall__Outputs {
    return new RetriveTokensCall__Outputs(this);
  }
}

export class RetriveTokensCall__Inputs {
  _call: RetriveTokensCall;

  constructor(call: RetriveTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RetriveTokensCall__Outputs {
  _call: RetriveTokensCall;

  constructor(call: RetriveTokensCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetArbVaultCall extends ethereum.Call {
  get inputs(): SetArbVaultCall__Inputs {
    return new SetArbVaultCall__Inputs(this);
  }

  get outputs(): SetArbVaultCall__Outputs {
    return new SetArbVaultCall__Outputs(this);
  }
}

export class SetArbVaultCall__Inputs {
  _call: SetArbVaultCall;

  constructor(call: SetArbVaultCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetArbVaultCall__Outputs {
  _call: SetArbVaultCall;

  constructor(call: SetArbVaultCall) {
    this._call = call;
  }
}

export class SetDurationsCall extends ethereum.Call {
  get inputs(): SetDurationsCall__Inputs {
    return new SetDurationsCall__Inputs(this);
  }

  get outputs(): SetDurationsCall__Outputs {
    return new SetDurationsCall__Outputs(this);
  }
}

export class SetDurationsCall__Inputs {
  _call: SetDurationsCall;

  constructor(call: SetDurationsCall) {
    this._call = call;
  }

  get _minDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDurationsCall__Outputs {
  _call: SetDurationsCall;

  constructor(call: SetDurationsCall) {
    this._call = call;
  }
}

export class SetPriceFeedCall extends ethereum.Call {
  get inputs(): SetPriceFeedCall__Inputs {
    return new SetPriceFeedCall__Inputs(this);
  }

  get outputs(): SetPriceFeedCall__Outputs {
    return new SetPriceFeedCall__Outputs(this);
  }
}

export class SetPriceFeedCall__Inputs {
  _call: SetPriceFeedCall;

  constructor(call: SetPriceFeedCall) {
    this._call = call;
  }

  get _priceFeed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPriceFeedCall__Outputs {
  _call: SetPriceFeedCall;

  constructor(call: SetPriceFeedCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class VestCall extends ethereum.Call {
  get inputs(): VestCall__Inputs {
    return new VestCall__Inputs(this);
  }

  get outputs(): VestCall__Outputs {
    return new VestCall__Outputs(this);
  }
}

export class VestCall__Inputs {
  _call: VestCall;

  constructor(call: VestCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class VestCall__Outputs {
  _call: VestCall;

  constructor(call: VestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
