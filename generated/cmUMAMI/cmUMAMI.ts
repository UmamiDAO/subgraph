// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Recovered extends ethereum.Event {
  get params(): Recovered__Params {
    return new Recovered__Params(this);
  }
}

export class Recovered__Params {
  _event: Recovered;

  constructor(event: Recovered) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Reinvest extends ethereum.Event {
  get params(): Reinvest__Params {
    return new Reinvest__Params(this);
  }
}

export class Reinvest__Params {
  _event: Reinvest;

  constructor(event: Reinvest) {
    this._event = event;
  }

  get newTotalDeposits(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTotalSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateAdminFee extends ethereum.Event {
  get params(): UpdateAdminFee__Params {
    return new UpdateAdminFee__Params(this);
  }
}

export class UpdateAdminFee__Params {
  _event: UpdateAdminFee;

  constructor(event: UpdateAdminFee) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateMinTokensToReinvest extends ethereum.Event {
  get params(): UpdateMinTokensToReinvest__Params {
    return new UpdateMinTokensToReinvest__Params(this);
  }
}

export class UpdateMinTokensToReinvest__Params {
  _event: UpdateMinTokensToReinvest;

  constructor(event: UpdateMinTokensToReinvest) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateMinTokensToReinvestBeforeDeposit extends ethereum.Event {
  get params(): UpdateMinTokensToReinvestBeforeDeposit__Params {
    return new UpdateMinTokensToReinvestBeforeDeposit__Params(this);
  }
}

export class UpdateMinTokensToReinvestBeforeDeposit__Params {
  _event: UpdateMinTokensToReinvestBeforeDeposit;

  constructor(event: UpdateMinTokensToReinvestBeforeDeposit) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateReinvestReward extends ethereum.Event {
  get params(): UpdateReinvestReward__Params {
    return new UpdateReinvestReward__Params(this);
  }
}

export class UpdateReinvestReward__Params {
  _event: UpdateReinvestReward;

  constructor(event: UpdateReinvestReward) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateRequireReinvestBeforeDeposit extends ethereum.Event {
  get params(): UpdateRequireReinvestBeforeDeposit__Params {
    return new UpdateRequireReinvestBeforeDeposit__Params(this);
  }
}

export class UpdateRequireReinvestBeforeDeposit__Params {
  _event: UpdateRequireReinvestBeforeDeposit;

  constructor(event: UpdateRequireReinvestBeforeDeposit) {
    this._event = event;
  }

  get newValue(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class UpdateWithdrawFee extends ethereum.Event {
  get params(): UpdateWithdrawFee__Params {
    return new UpdateWithdrawFee__Params(this);
  }
}

export class UpdateWithdrawFee__Params {
  _event: UpdateWithdrawFee;

  constructor(event: UpdateWithdrawFee) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class cmUMAMI extends ethereum.SmartContract {
  static bind(address: Address): cmUMAMI {
    return new cmUMAMI("cmUMAMI", address);
  }

  ADMIN_FEE_BIPS(): BigInt {
    let result = super.call("ADMIN_FEE_BIPS", "ADMIN_FEE_BIPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ADMIN_FEE_BIPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ADMIN_FEE_BIPS",
      "ADMIN_FEE_BIPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MIN_TOKENS_TO_REINVEST(): BigInt {
    let result = super.call(
      "MIN_TOKENS_TO_REINVEST",
      "MIN_TOKENS_TO_REINVEST():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_TOKENS_TO_REINVEST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_TOKENS_TO_REINVEST",
      "MIN_TOKENS_TO_REINVEST():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REINVEST_REWARD_BIPS(): BigInt {
    let result = super.call(
      "REINVEST_REWARD_BIPS",
      "REINVEST_REWARD_BIPS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REINVEST_REWARD_BIPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REINVEST_REWARD_BIPS",
      "REINVEST_REWARD_BIPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkReward(): BigInt {
    let result = super.call("checkReward", "checkReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_checkReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("checkReward", "checkReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositToken(): Address {
    let result = super.call("depositToken", "depositToken():(address)", []);

    return result[0].toAddress();
  }

  try_depositToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("depositToken", "depositToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeDestination(): Address {
    let result = super.call("feeDestination", "feeDestination():(address)", []);

    return result[0].toAddress();
  }

  try_feeDestination(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feeDestination",
      "feeDestination():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDepositTokensForShares(amount: BigInt): BigInt {
    let result = super.call(
      "getDepositTokensForShares",
      "getDepositTokensForShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_getDepositTokensForShares(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositTokensForShares",
      "getDepositTokensForShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSharesForDepositTokens(amount: BigInt): BigInt {
    let result = super.call(
      "getSharesForDepositTokens",
      "getSharesForDepositTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_getSharesForDepositTokens(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSharesForDepositTokens",
      "getSharesForDepositTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRewardToken(param0: Address): boolean {
    let result = super.call("isRewardToken", "isRewardToken(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isRewardToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRewardToken",
      "isRewardToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marinateContract(): Address {
    let result = super.call(
      "marinateContract",
      "marinateContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_marinateContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marinateContract",
      "marinateContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  rewardTokens(param0: BigInt): Address {
    let result = super.call("rewardTokens", "rewardTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_rewardTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokensLength(): BigInt {
    let result = super.call(
      "rewardTokensLength",
      "rewardTokensLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardTokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardTokensLength",
      "rewardTokensLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  routes(param0: BigInt): Bytes {
    let result = super.call("routes", "routes(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_routes(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("routes", "routes(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalDeposits(): BigInt {
    let result = super.call("totalDeposits", "totalDeposits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeposits",
      "totalDeposits():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _depositToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _marinateContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRewardTokenCall extends ethereum.Call {
  get inputs(): AddRewardTokenCall__Inputs {
    return new AddRewardTokenCall__Inputs(this);
  }

  get outputs(): AddRewardTokenCall__Outputs {
    return new AddRewardTokenCall__Outputs(this);
  }
}

export class AddRewardTokenCall__Inputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }

  get rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get swapRoute(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AddRewardTokenCall__Outputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CheckRewardCall extends ethereum.Call {
  get inputs(): CheckRewardCall__Inputs {
    return new CheckRewardCall__Inputs(this);
  }

  get outputs(): CheckRewardCall__Outputs {
    return new CheckRewardCall__Outputs(this);
  }
}

export class CheckRewardCall__Inputs {
  _call: CheckRewardCall;

  constructor(call: CheckRewardCall) {
    this._call = call;
  }
}

export class CheckRewardCall__Outputs {
  _call: CheckRewardCall;

  constructor(call: CheckRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MigrateTokenCall extends ethereum.Call {
  get inputs(): MigrateTokenCall__Inputs {
    return new MigrateTokenCall__Inputs(this);
  }

  get outputs(): MigrateTokenCall__Outputs {
    return new MigrateTokenCall__Outputs(this);
  }
}

export class MigrateTokenCall__Inputs {
  _call: MigrateTokenCall;

  constructor(call: MigrateTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destination(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MigrateTokenCall__Outputs {
  _call: MigrateTokenCall;

  constructor(call: MigrateTokenCall) {
    this._call = call;
  }
}

export class RecoverETHCall extends ethereum.Call {
  get inputs(): RecoverETHCall__Inputs {
    return new RecoverETHCall__Inputs(this);
  }

  get outputs(): RecoverETHCall__Outputs {
    return new RecoverETHCall__Outputs(this);
  }
}

export class RecoverETHCall__Inputs {
  _call: RecoverETHCall;

  constructor(call: RecoverETHCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RecoverETHCall__Outputs {
  _call: RecoverETHCall;

  constructor(call: RecoverETHCall) {
    this._call = call;
  }
}

export class ReinvestCall extends ethereum.Call {
  get inputs(): ReinvestCall__Inputs {
    return new ReinvestCall__Inputs(this);
  }

  get outputs(): ReinvestCall__Outputs {
    return new ReinvestCall__Outputs(this);
  }
}

export class ReinvestCall__Inputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class ReinvestCall__Outputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class RemoveRewardTokenCall extends ethereum.Call {
  get inputs(): RemoveRewardTokenCall__Inputs {
    return new RemoveRewardTokenCall__Inputs(this);
  }

  get outputs(): RemoveRewardTokenCall__Outputs {
    return new RemoveRewardTokenCall__Outputs(this);
  }
}

export class RemoveRewardTokenCall__Inputs {
  _call: RemoveRewardTokenCall;

  constructor(call: RemoveRewardTokenCall) {
    this._call = call;
  }

  get rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRewardTokenCall__Outputs {
  _call: RemoveRewardTokenCall;

  constructor(call: RemoveRewardTokenCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeAllowanceCall extends ethereum.Call {
  get inputs(): RevokeAllowanceCall__Inputs {
    return new RevokeAllowanceCall__Inputs(this);
  }

  get outputs(): RevokeAllowanceCall__Outputs {
    return new RevokeAllowanceCall__Outputs(this);
  }
}

export class RevokeAllowanceCall__Inputs {
  _call: RevokeAllowanceCall;

  constructor(call: RevokeAllowanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeAllowanceCall__Outputs {
  _call: RevokeAllowanceCall;

  constructor(call: RevokeAllowanceCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAllowancesCall extends ethereum.Call {
  get inputs(): SetAllowancesCall__Inputs {
    return new SetAllowancesCall__Inputs(this);
  }

  get outputs(): SetAllowancesCall__Outputs {
    return new SetAllowancesCall__Outputs(this);
  }
}

export class SetAllowancesCall__Inputs {
  _call: SetAllowancesCall;

  constructor(call: SetAllowancesCall) {
    this._call = call;
  }
}

export class SetAllowancesCall__Outputs {
  _call: SetAllowancesCall;

  constructor(call: SetAllowancesCall) {
    this._call = call;
  }
}

export class SetFeeDestinationCall extends ethereum.Call {
  get inputs(): SetFeeDestinationCall__Inputs {
    return new SetFeeDestinationCall__Inputs(this);
  }

  get outputs(): SetFeeDestinationCall__Outputs {
    return new SetFeeDestinationCall__Outputs(this);
  }
}

export class SetFeeDestinationCall__Inputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }

  get newDestination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeDestinationCall__Outputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateAdminFeeCall extends ethereum.Call {
  get inputs(): UpdateAdminFeeCall__Inputs {
    return new UpdateAdminFeeCall__Inputs(this);
  }

  get outputs(): UpdateAdminFeeCall__Outputs {
    return new UpdateAdminFeeCall__Outputs(this);
  }
}

export class UpdateAdminFeeCall__Inputs {
  _call: UpdateAdminFeeCall;

  constructor(call: UpdateAdminFeeCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateAdminFeeCall__Outputs {
  _call: UpdateAdminFeeCall;

  constructor(call: UpdateAdminFeeCall) {
    this._call = call;
  }
}

export class UpdateMinTokensToReinvestCall extends ethereum.Call {
  get inputs(): UpdateMinTokensToReinvestCall__Inputs {
    return new UpdateMinTokensToReinvestCall__Inputs(this);
  }

  get outputs(): UpdateMinTokensToReinvestCall__Outputs {
    return new UpdateMinTokensToReinvestCall__Outputs(this);
  }
}

export class UpdateMinTokensToReinvestCall__Inputs {
  _call: UpdateMinTokensToReinvestCall;

  constructor(call: UpdateMinTokensToReinvestCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinTokensToReinvestCall__Outputs {
  _call: UpdateMinTokensToReinvestCall;

  constructor(call: UpdateMinTokensToReinvestCall) {
    this._call = call;
  }
}

export class UpdateReinvestRewardCall extends ethereum.Call {
  get inputs(): UpdateReinvestRewardCall__Inputs {
    return new UpdateReinvestRewardCall__Inputs(this);
  }

  get outputs(): UpdateReinvestRewardCall__Outputs {
    return new UpdateReinvestRewardCall__Outputs(this);
  }
}

export class UpdateReinvestRewardCall__Inputs {
  _call: UpdateReinvestRewardCall;

  constructor(call: UpdateReinvestRewardCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateReinvestRewardCall__Outputs {
  _call: UpdateReinvestRewardCall;

  constructor(call: UpdateReinvestRewardCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
